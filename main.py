from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters, ConversationHandler, filters
import os

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤
ENTER_CARD, ENTER_AMOUNT, ENTER_TON_AMOUNT, ENTER_STARS_AMOUNT, ENTER_DESCRIPTION = range(5)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üéÅ –°–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É", callback_data="create_deal")],
        [InlineKeyboardButton("üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞", callback_data="referral_system")],
        [InlineKeyboardButton("üåê –Ø–∑—ã–∫", callback_data="change_language")],
        [InlineKeyboardButton("üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    welcome_text = (
        "üíé **Saphire Gift**\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—Ä–æ–µ–∫—Ç SAPHIRE ‚Äì –≤–∞—à –Ω–∞–¥–µ–∂–Ω—ã–π P2P-–≥–∞—Ä–∞–Ω—Ç üòä\n\n"
        "–°–æ–≤–µ—Ä—à–∞–π—Ç–µ —Å–¥–µ–ª–∫–∏ –Ω–∞ NFT –ø–æ–¥–∞—Ä–∫–∏ –ª–µ–≥–∫–æ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ!\n\n"
        "üìå **–ß—Ç–æ –º—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º:**\n\n"
        "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ —Å–¥–µ–ª–æ–∫\n"
        "‚Ä¢ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ —Å –±–æ–Ω—É—Å–∞–º–∏\n"
        "‚Ä¢ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Å–¥–µ–ª–∫–∏ —Å –ø–æ–ª–Ω–æ–π –≥–∞—Ä–∞–Ω—á–∏–µ–π\n"
        "‚Ä¢ –ü–µ—Ä–µ–¥–∞—á–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏ —É—Å–ª—É–≥ —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä–∞: @SaphireGift\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ üëç\n\n"
        "---\n"
        "**–†–µ–∫–≤–∏–∑–∏—Ç—ã**"
    )

    await update.message.reply_text(
        welcome_text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "create_deal":
        payment_keyboard = [
            [InlineKeyboardButton("üíé TON", callback_data="payment_ton")],
            [InlineKeyboardButton("üí≥ –ö–∞—Ä—Ç–∞", callback_data="payment_card")],
            [InlineKeyboardButton("‚≠ê –ó–≤–µ–∑–¥—ã", callback_data="payment_stars")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_main")]
        ]
        payment_reply_markup = InlineKeyboardMarkup(payment_keyboard)
        
        await query.message.edit_text(
            "üíé **Saphire Gift**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã:",
            reply_markup=payment_reply_markup,
            parse_mode='Markdown'
        )

    elif query.data == "payment_ton":
        await query.message.edit_text(
            "üíé **Saphire Gift**\n\n"
            "---\n"
            "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ TON:\n\n"
            "–ü—Ä–∏–º–µ—Ä: 10.5",
            parse_mode='Markdown'
        )
        return ENTER_TON_AMOUNT

    elif query.data == "payment_card":
        currency_keyboard = [
            [InlineKeyboardButton("‚ÇΩ –†—É–±–ª–∏", callback_data="currency_rub")],
            [InlineKeyboardButton("‚Ç¥ –ì—Ä–∏–≤–Ω—ã", callback_data="currency_uah")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="create_deal")]
        ]
        currency_reply_markup = InlineKeyboardMarkup(currency_keyboard)
        
        await query.message.edit_text(
            "üíé **Saphire Gift**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É:",
            reply_markup=currency_reply_markup,
            parse_mode='Markdown'
        )

    elif query.data == "currency_rub":
        context.user_data['currency'] = 'RUB'
        await query.message.edit_text(
            "üí≥ **–ü—Ä–∏–≤—è–∑–∫–∞ –∫–∞—Ä—Ç—ã**\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç—ã:\n\n"
            "–ü—Ä–∏–º–µ—Ä: 1234 5678 9012 3456",
            parse_mode='Markdown'
        )
        return ENTER_CARD

    elif query.data == "currency_uah":
        context.user_data['currency'] = 'UAH'
        await query.message.edit_text(
            "üí≥ **–ü—Ä–∏–≤—è–∑–∫–∞ –∫–∞—Ä—Ç—ã**\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç—ã:\n\n"
            "–ü—Ä–∏–º–µ—Ä: 1234 5678 9012 3456",
            parse_mode='Markdown'
        )
        return ENTER_CARD

    elif query.data == "payment_stars":
        await query.message.edit_text(
            "üíé **Saphire Gift**\n\n"
            "---\n"
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ó–≤—ë–∑–¥:\n\n"
            "–ü—Ä–∏–º–µ—Ä: 1000",
            parse_mode='Markdown'
        )
        return ENTER_STARS_AMOUNT

    elif query.data == "change_language":
        language_keyboard = [
            [InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="language_ru")],
            [InlineKeyboardButton("üá∫üá∏ English", callback_data="language_en")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
        language_reply_markup = InlineKeyboardMarkup(language_keyboard)
        
        await query.message.edit_text(
            "üíé **Saphire Gift**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:",
            reply_markup=language_reply_markup,
            parse_mode='Markdown'
        )

    elif query.data == "language_ru":
        await query.message.edit_text("‚úÖ –Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ –†—É—Å—Å–∫–∏–π")

    elif query.data == "language_en":
        await query.message.edit_text("‚úÖ Language changed to English")

    elif query.data == "referral_system":
        await query.message.edit_text("üë• **–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞**\n\n–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã!\n\n–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: https://t.me/SaphireGiftBot?start=ref123")

    elif query.data == "support":
        await query.message.edit_text("üÜò **–ü–æ–¥–¥–µ—Ä–∂–∫–∞**\n\n–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å:\n@SaphireGift")

    elif query.data == "back_to_main":
        await start(update, context)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_card_number(update: Update, context: ContextTypes.DEFAULT_TYPE):
    card_number = update.message.text
    context.user_data['card_number'] = card_number
    
    currency = context.user_data.get('currency', 'RUB')
    currency_name = '—Ä—É–±–ª—è—Ö' if currency == 'RUB' else '–≥—Ä–∏–≤–Ω–∞—Ö'
    
    await update.message.reply_text(
        f"üí≥ **–ö–∞—Ä—Ç–∞ –ø—Ä–∏–≤—è–∑–∞–Ω–∞:** {card_number}\n\n"
        f"üíé **Saphire Gift**\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ {currency_name}:",
        parse_mode='Markdown'
    )
    
    return ENTER_AMOUNT

async def handle_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    amount = update.message.text
    card_number = context.user_data.get('card_number', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
    currency = context.user_data.get('currency', 'RUB')
    
    currency_symbol = '‚ÇΩ' if currency == 'RUB' else '‚Ç¥'
    currency_name = '—Ä—É–±.' if currency == 'RUB' else '–≥—Ä–Ω.'
    
    await update.message.reply_text(
        f"‚úÖ **–°–¥–µ–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!**\n\n"
        f"**–ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã:** –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞\n"
        f"**–í–∞–ª—é—Ç–∞:** {currency_name}\n"
        f"**–ö–∞—Ä—Ç–∞:** {card_number}\n"
        f"**–°—É–º–º–∞:** {amount} {currency_symbol}\n\n"
        f"–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—è.",
        parse_mode='Markdown'
    )
    
    return ConversationHandler.END

async def handle_ton_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    amount = update.message.text
    
    await update.message.reply_text(
        f"‚úÖ **–°–¥–µ–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!**\n\n"
        f"**–ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã:** TON\n"
        f"**–°—É–º–º–∞:** {amount} TON\n\n"
        f"–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—è.",
        parse_mode='Markdown'
    )
    
    return ConversationHandler.END

async def handle_stars_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    stars_amount = update.message.text
    context.user_data['stars_amount'] = stars_amount
    
    await update.message.reply_text(
        f"üíé **Saphire Gift**\n\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ó–≤—ë–∑–¥: {stars_amount}\n\n"
        f"---\n"
        f"–û–ø–∏—à–∏—Ç–µ, –Ω–∞ —á—Ç–æ —Å–¥–µ–ª–∫–∞:\n\n"
        f"–ü—Ä–∏–º–µ—Ä: https://t.me/nft/PlushPepe-555",
        parse_mode='Markdown'
    )
    
    return ENTER_DESCRIPTION

async def handle_description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    description = update.message.text
    stars_amount = context.user_data.get('stars_amount', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
    
    await update.message.reply_text(
        f"‚úÖ **–°–¥–µ–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!**\n\n"
        f"**–ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã:** –ó–≤—ë–∑–¥—ã\n"
        f"**–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ó–≤—ë–∑–¥:** {stars_amount}\n"
        f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {description}\n\n"
        f"–°–¥–µ–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.",
        parse_mode='Markdown'
    )
    
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END

def main():
    # –¢–æ–∫–µ–Ω –±–æ—Ç–∞
    TOKEN = os.getenv('TELEGRAM_TOKEN') or "8215407859:AAGFlmK7VGW5eDZMKYbPoo-t8raLOXmNNAI"

    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app = Application.builder().token(TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler))

    # ConversationHandler –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤
    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(button_handler)],
        states={
            ENTER_CARD: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_card_number)],
            ENTER_AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_amount)],
            ENTER_TON_AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_ton_amount)],
            ENTER_STARS_AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_stars_amount)],
            ENTER_DESCRIPTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_description)],
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )

    app.add_handler(conv_handler)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω–æ –ª–∏ –Ω–∞ Render
    if os.getenv("RENDER"):
        # Webhook –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
        port = int(os.environ.get("PORT", 10000))
        app.run_webhook(
            listen="0.0.0.0",
            port=port,
            url_path=TOKEN,
            webhook_url=f"https://your-bot-name.onrender.com/{TOKEN}",
            drop_pending_updates=True
        )
        print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ Render —á–µ—Ä–µ–∑ Webhook!")
    else:
        # Polling –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        app.run_polling(drop_pending_updates=True)
        print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ —á–µ—Ä–µ–∑ Polling!")

if __name__ == "__main__":

    main()
